#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

readonly BINARY_NAME="jq"
readonly DOWNLOAD_BASE_URL="https://github.com/stedolan/jq/releases/download"

error_exit() {
  echo "$1" >&2
  exit "${2:-1}"
}

MACHINE="$(uname -m)"
case "${MACHINE}" in
    x86_64) ;;
    *) echo "Unknown machine architecture: ${MACHINE}"
       exit 1
esac

KERNEL_NAME="$(uname -s)"
case "${KERNEL_NAME}" in
    Darwin) readonly PLATFORM="osx-amd64"
            readonly TEMP_DIR=$(/usr/bin/mktemp -dt asdf-jq)
            ;;
    Linux) readonly PLATFORM="linux-amd64"
           readonly TEMP_DIR=$(mktemp -dp /tmp asdf-jq.XXXXXXXX)
           ;;
    *) echo "Unknown operating system: ${KERNEL_NAME}"
       exit 1
esac

trap 'test -d "${TEMP_DIR}" && rm -rf "${TEMP_DIR}"' EXIT

install() {
  local -r install_type="$1"
  local -r install_version="$2"
  local -r install_path="$3"
  local -r install_path_bin="${install_path}/bin"
  local -r download_url="${DOWNLOAD_BASE_URL}/${install_version}/${BINARY_NAME}-${PLATFORM}"
  local -r download_path="${TEMP_DIR}/${BINARY_NAME}"

  [ "$install_type" != "version" ] && error_exit "Error: source installs are not supported"

  echo "Downloading from ${download_url}"
  if curl -fL -o "$download_path" "$download_url"; then
    echo "Installing binary"
    mkdir -p "$install_path_bin"
    mv "$download_path" "${install_path_bin}/${BINARY_NAME}"
    chmod +x "${install_path_bin}/${BINARY_NAME}"
  else
    error_exit "Error: ${BINARY_NAME} version ${install_version} not found"
  fi
}

#
install "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
